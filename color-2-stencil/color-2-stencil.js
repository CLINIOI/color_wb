// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const fileInput = document.getElementById("file-input");
const canvas = document.getElementById("canvas");
const ctx = canvas.getContext("2d");

const color1Input = document.getElementById("color1");
const color2Input = document.getElementById("color2");
const swapColorsBtn = document.getElementById("swapColors");

const thresholdRange = document.getElementById("threshold");
const thresholdValue = document.getElementById("thresholdValue");
const saveBtn = document.getElementById("saveBtn");

// –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ canvas
let originalImage = new Image();
let canvasWidth = 800;
let canvasHeight = 600;
const faqBtn = document.getElementById("faqBtn");
// FAQ: –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
faqBtn.addEventListener("click", () => {
  $("#faqModal").modal("show");
});
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
thresholdRange.addEventListener("input", () => {
  thresholdValue.textContent = thresholdRange.value;
  applyTwoColorEffect();
});

// –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
color1Input.addEventListener("input", applyTwoColorEffect);
color2Input.addEventListener("input", applyTwoColorEffect);

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é file input
fileInput.addEventListener("change", (e) => {
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = (event) => {
    originalImage = new Image();
    originalImage.onload = () => {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas —Å–æ–≥–ª–∞—Å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      canvasWidth = originalImage.width;
      canvasHeight = originalImage.height;
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;

      // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
      ctx.drawImage(originalImage, 0, 0);
      applyTwoColorEffect();
    };
    originalImage.src = event.target.result;
  };
  reader.readAsDataURL(file);
});

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ HEX –≤ RGB
function hexToRgb(hex) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (#abc) –≤ –ø–æ–ª–Ω—ã–π (#aabbcc)
  const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, (m, r, g, b) => {
    return r + r + g + g + b + b;
  });
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result
    ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16),
      }
    : { r: 0, g: 0, b: 0 };
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–≤—É—Ö—Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∞—Ä–µ—Ç–∞
function applyTwoColorEffect() {
  if (!originalImage.src) return;

  // –°–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  ctx.drawImage(originalImage, 0, 0, canvasWidth, canvasHeight);
  const imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);
  const data = imageData.data;

  const threshold = parseInt(thresholdRange.value);
  const color1 = hexToRgb(color1Input.value);
  const color2 = hexToRgb(color2Input.value);

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∏–∫—Å–µ–ª—è–º
  for (let i = 0; i < data.length; i += 4) {
    const r = data[i];
    const g = data[i + 1];
    const b = data[i + 2];

    // –í—ã—á–∏—Å–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å (grayscale) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã
    const grayscale = 0.299 * r + 0.587 * g + 0.114 * b;

    // –ï—Å–ª–∏ —è—Ä–∫–æ—Å—Ç—å –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç1, –∏–Ω–∞—á–µ —Ü–≤–µ—Ç2
    if (grayscale < threshold) {
      data[i] = color1.r;
      data[i + 1] = color1.g;
      data[i + 2] = color1.b;
    } else {
      data[i] = color2.r;
      data[i + 1] = color2.g;
      data[i + 2] = color2.b;
    }
  }
  // –û–±–Ω–æ–≤–ª—è–µ–º canvas —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  ctx.putImageData(imageData, 0, 0);
}

// –°–º–µ–Ω–∞ –º–µ—Å—Ç–∞–º–∏ —Ü–≤–µ—Ç–æ–≤
swapColorsBtn.addEventListener("click", () => {
  const tmp = color1Input.value;
  color1Input.value = color2Input.value;
  color2Input.value = tmp;
  applyTwoColorEffect();
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
saveBtn.addEventListener("click", () => {
  const link = document.createElement("a");
  link.download = "two_color_stencil.png";
  link.href = canvas.toDataURL();
  link.click();
});

document.addEventListener("DOMContentLoaded", () => {
  const themeToggle = document.getElementById("themeToggle");

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Ç–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const savedTheme = localStorage.getItem("theme") || "light";
  if (savedTheme === "dark") {
    document.body.classList.add("dark-theme");
    themeToggle.textContent = "‚òÄÔ∏è";
  } else {
    document.body.classList.remove("dark-theme");
    themeToggle.textContent = "üåô";
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
  themeToggle.addEventListener("click", () => {
    if (document.body.classList.contains("dark-theme")) {
      document.body.classList.remove("dark-theme");
      localStorage.setItem("theme", "light");
      themeToggle.textContent = "üåô";
    } else {
      document.body.classList.add("dark-theme");
      localStorage.setItem("theme", "dark");
      themeToggle.textContent = "‚òÄÔ∏è";
    }
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ canvas
  const startingImg = document.querySelector("#canvas-container img");
  if (startingImg) {
    originalImage = new Image();
    originalImage.onload = () => {
      canvasWidth = originalImage.width;
      canvasHeight = originalImage.height;
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
      ctx.drawImage(originalImage, 0, 0, canvasWidth, canvasHeight);
      applyTwoColorEffect();
    };
    originalImage.src = startingImg.src;
    // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ
    startingImg.style.display = "none";
  }
});

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äì —Ç–æ–∂–µ —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –µ—Å—Ç—å
fileInput.addEventListener("change", (e) => {
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = (event) => {
    originalImage = new Image();
    originalImage.onload = () => {
      canvasWidth = originalImage.width;
      canvasHeight = originalImage.height;
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      ctx.drawImage(originalImage, 0, 0, canvasWidth, canvasHeight);
      applyTwoColorEffect();
    };
    originalImage.src = event.target.result;
  };
  reader.readAsDataURL(file);

  // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
  const startingImg = document.querySelector("#canvas-container img");
  if (startingImg) {
    startingImg.style.display = "none";
  }
});
